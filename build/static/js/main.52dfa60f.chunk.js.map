{"version":3,"sources":["components/ShapesButton.js","components/Shapes.js","App.js","reportWebVitals.js","index.js"],"names":["ShapesButton","shape","addFunction","onClick","defaultProps","GeomentrySphere","position","color","args","deleteFunction","id","parseInt","attach","GeomentryBox","GeomentryCylinder","GeomentryModels","props","renderModel","App","useState","geomentryModel","setgeomentryModles","deleteModel","model","filter","i","console","log","style","display","addShape","camera","near","far","intensity","angle","map","OrbitControls","getRandomInt","max","Math","ceil","random","round","floor","inc","newModel","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAGMA,EAAe,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAC3B,OACI,8BACI,wBAAQC,QAAS,kBAAID,EAAYD,IAAjC,SAA0CA,OAMtDD,EAAaI,aAAe,CACxBH,MAAO,UAQID,Q,QCjBTK,EAAkB,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,SAAgBC,GAAgC,EAAtCC,KAAsC,EAAhCD,OAAOE,EAAyB,EAAzBA,eAAgBC,EAAS,EAATA,GAE9D,OADAA,EAAKC,SAASD,GAEV,cAAC,IAAD,CAAiBJ,SAAUA,EAAUE,KAAM,CAAC,EAAG,IAAKL,QAAS,kBAAMM,EAAeC,IAAlF,SAGI,mCAAmBE,OAAO,WAAWL,MAAOA,KAHnCG,IASfG,EAAe,SAAC,GAAmD,IAAjDP,EAAgD,EAAhDA,SAAgBC,GAAgC,EAAtCC,KAAsC,EAAhCD,OAAOE,EAAyB,EAAzBA,eAAgBC,EAAS,EAATA,GAC3D,OACI,cAAC,IAAD,CAAcJ,SAAUA,EAAUH,QAAS,kBAAMM,EAAeC,IAAhE,SACI,mCAAmBE,OAAO,WAAWL,MAAOA,KADtCG,IAOZI,EAAoB,SAAC,GAAmD,IAAjDR,EAAgD,EAAhDA,SAAgBC,GAAgC,EAAtCC,KAAsC,EAAhCD,OAAOE,EAAyB,EAAzBA,eAAgBC,EAAS,EAATA,GAChE,OACI,cAAC,IAAD,CAAmBJ,SAAUA,EAAUE,KAAM,CAAC,EAAG,EAAG,EAAG,IAAKL,QAAS,kBAAMM,EAAeC,IAA1F,SACI,mCAAmBE,OAAO,WAAWL,MAAOA,KADjCG,IAOvBL,EAAgBD,aACZS,EAAaT,aACbU,EAAkBV,aAClB,CACIG,MAAO,S,MCrBf,SAASQ,EAAgBC,GACvB,OAXF,YAAsE,IAA/Cf,EAA8C,EAA9CA,MAAOK,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,MAAOE,EAAsB,EAAtBA,eAAgBC,EAAM,EAANA,GAC7D,OAAQT,GACN,IAAK,SACH,OAAO,cAAC,EAAD,CAAiBK,SAAUA,EAAUC,MAAOA,EAAOE,eAAgBA,EAAgBC,GAAIA,IAChG,IAAK,MACH,OAAO,cAAC,EAAD,CAAcJ,SAAUA,EAAUC,MAAOA,EAAOE,eAAgBA,EAAgBC,GAAIA,IAC7F,QACE,OAAO,cAAC,EAAD,CAAmBJ,SAAUA,EAAUC,MAAOA,EAAOE,eAAgBA,EAAgBC,GAAIA,KAKlGO,CAAYD,GAID,SAASE,IAAO,IAAD,EAEiBC,mBAAS,IAF1B,mBAErBC,EAFqB,KAELC,EAFK,KAItBC,EAAc,SAACZ,GACnBW,GAAmB,SAAAE,GAAK,OAAIA,EAAMC,QAAO,SAACJ,EAAgBK,GAAjB,OAA6B,IAANA,QAEhEC,QAAQC,IAAI,WAAYjB,IAS1B,OACE,qCACE,uBAAMkB,MAAO,CAAEC,QAAS,QAAxB,UACE,cAAC,EAAD,CAAc5B,MAAM,SAASC,YAAa4B,IAC1C,cAAC,EAAD,CAAc7B,MAAM,WAAWC,YAAa4B,IAC5C,cAAC,EAAD,CAAc7B,MAAM,MAAMC,YAAa4B,OAEzC,eAAC,IAAD,CACEC,OAAQ,CAAEzB,SAAU,CAAC,EAAG,EAAG,IAAK0B,KAAM,EAAGC,IAAK,IADhD,UAME,8BAAcC,UAAW,KACzB,4BAAY5B,SAAU,CAAC,IAAK,IAAK,KAAM4B,UAAW,MAClD,2BAAW5B,SAAU,CAAC,GAAI,GAAI,IAAK6B,MAAO,MAGzCf,EAAegB,KAAI,SAACpB,GAAD,OAClB,cAACD,EAAD,eAAqBC,OAGvB,cAACqB,EAAA,EAAD,UAQN,SAASC,EAAaC,GAKpB,OAAIA,EAAM,EACDC,KAAKC,KAAKD,KAAKE,SAAWH,IAAQC,KAAKG,MAAMH,KAAKE,UAAY,GAAK,GACrEF,KAAKI,MAAMJ,KAAKE,SAAWH,GAAO,EAQ3C,SAAST,EAAS7B,GAEhB,IACMM,EADS,CAAC,SAAU,SAAU,OAAQ,QAAS,SAAU,SAAU,OACpD+B,EAAa,IAC9BhC,EAAW,CAACgC,GAAc,IAAKA,GAAc,GAAIA,EAAa,GAAKA,EAAa,IAEhFO,EAAM,EACNC,EAAW1B,EAAegB,KAAI,SAACpB,GAAD,mBAAC,eAAgBA,GAAjB,IAAyBN,GAAGmC,SAE9DC,EAASC,KAAK,CAAE9C,MAAOA,EAAOK,SAAUA,EAAUC,MAAOA,EAAOE,eAAgBa,EAAaZ,GAAImC,MACjGxB,EAAmB,YAAIyB,KC9F3B,IAYeE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.52dfa60f.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\n\r\nconst ShapesButton = ({ shape, addFunction }) => {\r\n    return (\r\n        <div>\r\n            <button onClick={()=>addFunction(shape)}>{shape}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nShapesButton.defaultProps = {\r\n    shape: \"sphere\"\r\n};\r\n\r\nShapesButton.propTypes = {\r\n    shape: PropTypes.string.isRequired,\r\n    addFunction: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ShapesButton\r\n","import { Box, Sphere, Cylinder } from '@react-three/drei'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst GeomentrySphere = ({ position, args, color, deleteFunction, id }) => {\r\n    id = parseInt(id);\r\n    return (\r\n        <Sphere key={id} position={position} args={[1, 50]} onClick={() => deleteFunction(id)}>\r\n            {/* onClick={() => deleteFunction(id)} */}\r\n            {/* onClick={deleteFunction} */}\r\n            <meshBasicMaterial attach=\"material\" color={color} />\r\n        </Sphere>\r\n    )\r\n}\r\n\r\n\r\nconst GeomentryBox = ({ position, args, color, deleteFunction, id }) => {\r\n    return (\r\n        <Box key={id} position={position} onClick={() => deleteFunction(id)}>\r\n            <meshBasicMaterial attach=\"material\" color={color} />\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\nconst GeomentryCylinder = ({ position, args, color, deleteFunction, id }) => {\r\n    return (\r\n        <Cylinder key={id} position={position} args={[1, 1, 1, 32]} onClick={() => deleteFunction(id)}>\r\n            <meshBasicMaterial attach=\"material\" color={color} />\r\n        </Cylinder>\r\n    )\r\n}\r\n\r\n// default config\r\nGeomentrySphere.defaultProps =\r\n    GeomentryBox.defaultProps =\r\n    GeomentryCylinder.defaultProps =\r\n    {\r\n        color: \"black\"\r\n    };\r\n\r\nGeomentrySphere.propTypes =\r\n    GeomentryBox.propTypes =\r\n    GeomentryCylinder.propTypes =\r\n    {\r\n        color: PropTypes.string.isRequired,\r\n    };\r\n\r\nexport { GeomentrySphere, GeomentryBox, GeomentryCylinder };\r\n","import React, { useState } from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport { OrbitControls } from '@react-three/drei'\nimport ShapesButton from './components/ShapesButton';\nimport { GeomentrySphere, GeomentryBox, GeomentryCylinder } from './components/Shapes';\nimport './App.css';\n\nfunction renderModel({ shape, position, color, deleteFunction, id }) {\n  switch (shape) {\n    case 'sphere':\n      return <GeomentrySphere position={position} color={color} deleteFunction={deleteFunction} id={id} />;\n    case 'box':\n      return <GeomentryBox position={position} color={color} deleteFunction={deleteFunction} id={id} />;\n    default:\n      return <GeomentryCylinder position={position} color={color} deleteFunction={deleteFunction} id={id} />;\n  }\n}\nfunction GeomentryModels(props) {\n  return (\n    renderModel(props)\n  )\n}\n\nexport default function App() {\n\n  const [geomentryModel, setgeomentryModles] = useState([])\n\n  const deleteModel = (id) => {\n    setgeomentryModles(model => model.filter((geomentryModel, i) => i !== 0));\n    \n    console.log(\"deleting\", id);\n\n  }\n\n\n\n  // const changeTexture = (id) => {\n  // }\n\n  return (\n    <>\n      <span style={{ display: 'flex' }}>\n        <ShapesButton shape=\"sphere\" addFunction={addShape} />\n        <ShapesButton shape=\"cylinder\" addFunction={addShape} />\n        <ShapesButton shape=\"box\" addFunction={addShape} />\n      </span>\n      <Canvas\n        camera={{ position: [0, 0, 15], near: 5, far: 75 }}\n      >\n        {/* camera={{ position: [0, 7, 7], near: 5, far: 15 }} */}\n\n        {/* lights */}\n        <ambientLight intensity={0.8} />\n        <pointLight position={[150, 150, 150]} intensity={0.55} />\n        <spotLight position={[10, 10, 10]} angle={0.15} />\n\n        {/* models */}\n        {geomentryModel.map((props) => (\n          <GeomentryModels {...props} />\n        ))}\n        {/* <GeomentryModels shape=\"sphere\" position={[0, 0, 0]} color=\"chocolate\" deleteFunction={deleteModel} id=\"0\" /> */}\n        <OrbitControls />\n      </Canvas>\n    </>\n  )\n\n\n\n\n  function getRandomInt(max) {\n    // if max is negative\n    // return random b/w +ve and -ve \n    // else\n    // return random +ve below max range \n    if (max < 0)\n      return Math.ceil(Math.random() * max) * (Math.round(Math.random()) ? 1 : -1)\n    return Math.floor(Math.random() * max) + 1;\n  }\n\n\n  /**\n   * creates new shape and add it to existing rendering model\n   * @param {string} shape new shape to render\n   */\n  function addShape(shape) {\n    // random color and position\n    const colors = ['violet', 'indigo', 'blue', 'green', 'yellow', 'orange', 'red',];\n    const color = colors[getRandomInt(6)];\n    let position = [getRandomInt(-20), getRandomInt(-7), getRandomInt(3) - getRandomInt(5)];\n\n    let inc = 0;\n    let newModel = geomentryModel.map((props) => ({ ...props , id:inc++}))\n\n    newModel.push({ shape: shape, position: position, color: color, deleteFunction: deleteModel, id: inc++ })\n    setgeomentryModles([...newModel])\n  }\n\n\n\n\n}\n\n\n/**\n * references for errors\n * https://stackoverflow.com/questions/59465497/react-hook-usestate-update-state-and-rerender-the-view\n * \n * bug:\n * onclicking model delete will not work as expected\n */","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}